{"version":3,"file":"static/js/644.e76008b6.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/PredefinedList/PredefinedList.tsx","screens/Console/DirectPV/FormatDrives.tsx"],"sourcesContent":["import React, { Fragment } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { predefinedList } from \"../common/styleLibrary\";\n\ninterface IPredefinedList {\n  classes: any;\n  label?: string;\n  content: any;\n  multiLine?: boolean;\n  actionButton?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...predefinedList,\n  });\n\nconst PredefinedList = ({\n  classes,\n  label = \"\",\n  content,\n  multiLine = false,\n  actionButton,\n}: IPredefinedList) => {\n  return (\n    <Fragment>\n      <Grid className={classes.prefinedContainer}>\n        {label !== \"\" && (\n          <Grid item xs={12} className={classes.predefinedTitle}>\n            {label}\n          </Grid>\n        )}\n        <Grid\n          item\n          xs={12}\n          className={`${classes.predefinedList} ${\n            actionButton ? classes.includesActionButton : \"\"\n          }`}\n        >\n          <Grid\n            item\n            xs={12}\n            className={\n              multiLine ? classes.innerContentMultiline : classes.innerContent\n            }\n          >\n            {content}\n          </Grid>\n          {actionButton && (\n            <div className={classes.overlayShareOption}>{actionButton}</div>\n          )}\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(PredefinedList);\n","// This file is part of MinIO Operator\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useState } from \"react\";\nimport { DialogContentText, Grid, LinearProgress } from \"@mui/material\";\nimport { IDirectPVFormatResItem, IDirectPVFormatResult } from \"./types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport api from \"../../../common/api\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport PredefinedList from \"../Common/FormComponents/PredefinedList/PredefinedList\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../Common/ModalWrapper/ConfirmDialog\";\nimport { FormatDrivesIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\n\ninterface IFormatAllDrivesProps {\n  closeFormatModalAndRefresh: (\n    refresh: boolean,\n    formatIssuesList: IDirectPVFormatResItem[]\n  ) => void;\n  deleteOpen: boolean;\n  allDrives: boolean;\n  drivesToFormat: string[];\n}\n\nconst FormatDrives = ({\n  closeFormatModalAndRefresh,\n  deleteOpen,\n  allDrives,\n  drivesToFormat,\n}: IFormatAllDrivesProps) => {\n  const dispatch = useAppDispatch();\n  const [deleteLoading, setDeleteLoading] = useState<boolean>(false);\n  const [formatAll, setFormatAll] = useState<string>(\"\");\n  const [force, setForce] = useState<boolean>(false);\n\n  const removeRecord = () => {\n    if (deleteLoading) {\n      return;\n    }\n    setDeleteLoading(true);\n    api\n      .invoke(\"POST\", `/api/v1/directpv/drives/format`, {\n        drives: drivesToFormat,\n        force,\n      })\n      .then((res: IDirectPVFormatResult) => {\n        setDeleteLoading(false);\n        closeFormatModalAndRefresh(true, res.formatIssuesList);\n      })\n      .catch((err: ErrorResponseHandler) => {\n        setDeleteLoading(false);\n        dispatch(setErrorSnackMessage(err));\n      });\n  };\n  return (\n    <ConfirmDialog\n      title={`Format ${allDrives ? \"All \" : \"\"} Drives`}\n      confirmText={`Format Drive${\n        drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"\n      }`}\n      confirmButtonProps={{\n        disabled: formatAll !== \"YES, PROCEED\",\n      }}\n      isOpen={deleteOpen}\n      isLoading={deleteLoading}\n      onConfirm={removeRecord}\n      onClose={() => {\n        closeFormatModalAndRefresh(false, []);\n      }}\n      titleIcon={<FormatDrivesIcon />}\n      confirmationContent={\n        <React.Fragment>\n          <DialogContentText>\n            {!allDrives && (\n              <Fragment>\n                <PredefinedList\n                  label={`Selected Drive${\n                    drivesToFormat.length > 1 ? \"s\" : \"\"\n                  }`}\n                  content={drivesToFormat.join(\", \")}\n                />\n                <br />\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"force\"\n                id=\"force\"\n                name=\"force\"\n                checked={force}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setForce(event.target.checked);\n                }}\n                label={\"Force Format\"}\n                indicatorLabels={[\"Yes\", \"No\"]}\n              />\n            </Grid>\n            Are you sure you want to format{\" \"}\n            {allDrives ? <strong>All</strong> : \"the selected\"} drive\n            {drivesToFormat.length > 1 || allDrives ? \"s\" : \"\"}?.\n            <br />\n            <br />\n            <strong>\n              All information contained will be erased and cannot be recovered\n            </strong>\n            <br />\n            <br />\n            To continue please type <b>YES, PROCEED</b> in the box.\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                id=\"format-confirm\"\n                name=\"format-confirm\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  setFormatAll(event.target.value);\n                }}\n                label=\"\"\n                value={formatAll}\n              />\n            </Grid>\n          </DialogContentText>\n          {deleteLoading && <LinearProgress />}\n        </React.Fragment>\n      }\n    />\n  );\n};\n\nexport default FormatDrives;\n"],"names":["withStyles","theme","createStyles","predefinedList","classes","label","content","multiLine","actionButton","Fragment","Grid","className","prefinedContainer","item","xs","predefinedTitle","includesActionButton","innerContentMultiline","innerContent","overlayShareOption","closeFormatModalAndRefresh","deleteOpen","allDrives","drivesToFormat","dispatch","useAppDispatch","useState","deleteLoading","setDeleteLoading","formatAll","setFormatAll","force","setForce","ConfirmDialog","title","confirmText","length","confirmButtonProps","disabled","isOpen","isLoading","onConfirm","api","drives","then","res","formatIssuesList","catch","err","setErrorSnackMessage","onClose","titleIcon","confirmationContent","DialogContentText","join","FormSwitchWrapper","value","id","name","checked","onChange","event","target","indicatorLabels","InputBoxWrapper","LinearProgress"],"sourceRoot":""}