// This file is part of MinIO Operator
// Copyright (c) 2022 MinIO, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

import React, { Fragment, useEffect, useState } from "react";
import { Theme } from "@mui/material/styles";
import { PageHeader } from "mds";
import createStyles from "@mui/styles/createStyles";
import { spacingUtils } from "../Common/FormComponents/common/styleLibrary";
import withStyles from "@mui/styles/withStyles";
import { Box } from "@mui/material";
import PageLayout from "../Common/Layout/PageLayout";
import api from "../../../common/api";

import { SubnetRegTokenResponse } from "../License/types";
import { ErrorResponseHandler } from "../../../common/types";
import { useSelector } from "react-redux";
import { setErrorSnackMessage } from "../../../systemSlice";
import { AppState, useAppDispatch } from "../../../store";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import { TabPanel } from "../../shared/tabs";
import { ClusterRegistered, ProxyConfiguration } from "./utils";
import ApiKeyRegister from "./ApiKeyRegister";
import { fetchLicenseInfo } from "./registerThunks";
import {
  resetRegisterForm,
  setCurTab,
  setLoading,
  setSubnetRegToken,
} from "./registerSlice";
import OfflineRegistration from "./OfflineRegistration";
import SubnetMFAToken from "./SubnetMFAToken";
import ClusterRegistrationForm from "./ClusterRegistrationForm";
import OnlineRegistration from "./OnlineRegistration";

interface IRegister {
  classes: any;
}

const styles = (theme: Theme) =>
  createStyles({
    sizedLabel: {
      minWidth: "75px",
    },
    ...spacingUtils,
<<<<<<< HEAD
    ...containerForHeader,
=======
>>>>>>> 257e2bf98 (Move Register Component to Redux)
  });

const Register = ({ classes }: IRegister) => {
  const dispatch = useAppDispatch();

  const subnetMFAToken = useSelector(
    (state: AppState) => state.register.subnetMFAToken
  );
  const subnetAccessToken = useSelector(
    (state: AppState) => state.register.subnetAccessToken
  );

  const subnetRegToken = useSelector(
    (state: AppState) => state.register.subnetRegToken
  );
  const subnetOrganizations = useSelector(
    (state: AppState) => state.register.subnetOrganizations
  );

  const loading = useSelector((state: AppState) => state.register.loading);
  const loadingLicenseInfo = useSelector(
    (state: AppState) => state.register.loadingLicenseInfo
  );
  const clusterRegistered = useSelector(
    (state: AppState) => state.register.clusterRegistered
  );
  const licenseInfo = useSelector(
    (state: AppState) => state.register.licenseInfo
  );
  const curTab = useSelector((state: AppState) => state.register.curTab);

  const [initialLicenseLoading, setInitialLicenseLoading] =
    useState<boolean>(true);

  useEffect(() => {
    // when unmounted, reset
    return () => {
      dispatch(resetRegisterForm());
    };
  }, [dispatch]);

  const fetchSubnetRegToken = () => {
    if (loading || subnetRegToken) {
      return;
    }
    dispatch(setLoading(true));
    api
      .invoke("GET", "/api/v1/subnet/registration-token")
      .then((resp: SubnetRegTokenResponse) => {
        dispatch(setLoading(false));
        if (resp && resp.regToken) {
          dispatch(setSubnetRegToken(resp.regToken));
        }
      })
      .catch((err: ErrorResponseHandler) => {
        console.error(err);
        dispatch(setErrorSnackMessage(err));
        dispatch(setLoading(false));
      });
  };

  useEffect(() => {
    if (initialLicenseLoading) {
      dispatch(fetchLicenseInfo());
      setInitialLicenseLoading(false);
    }
  }, [initialLicenseLoading, setInitialLicenseLoading, dispatch]);

  let clusterRegistrationForm: JSX.Element = <Fragment />;

  if (subnetAccessToken && subnetOrganizations.length > 0) {
    clusterRegistrationForm = <ClusterRegistrationForm />;
  } else if (subnetMFAToken) {
    clusterRegistrationForm = <SubnetMFAToken />;
  } else {
    clusterRegistrationForm = <OnlineRegistration />;
  }

  const apiKeyRegistration = (
    <Fragment>
      <Box
        sx={{
          border: "1px solid #eaeaea",
          borderRadius: "2px",
          display: "flex",
          flexFlow: "column",
          padding: "43px",
        }}
      >
        {clusterRegistered && licenseInfo ? (
          <ClusterRegistered email={licenseInfo.email} />
        ) : (
          <ApiKeyRegister
            afterRegister={() => {
              dispatch(fetchLicenseInfo());
            }}
            registerEndpoint={"/api/v1/subnet/login"}
          />
        )}
      </Box>
      <ProxyConfiguration />
    </Fragment>
  );

<<<<<<< HEAD
  const offlineRegUrl = `https://subnet.min.io/cluster/register?token=${subnetRegToken}`;
  const offlineRegistration = (
    <Fragment>
      <Box
        sx={{
          border: "1px solid #eaeaea",
          borderRadius: "2px",
          display: "flex",
          flexFlow: "column",
          padding: "43px",
        }}
      >
        {clusterRegistered && licenseInfo ? (
          <ClusterRegistered email={licenseInfo.email} />
        ) : null}
        <Box
          sx={{
            "& .title-text": {
              marginLeft: "27px",
              fontWeight: 600,
            },
          }}
        >
          <FormTitle
            icon={<OfflineRegistrationIcon />}
            title={`Register cluster in an Airgap environment`}
          />
        </Box>

        <Box
          sx={{
            display: "flex",
          }}
        >
          <Box
            sx={{
              display: "flex",
              flexFlow: "column",
              flex: "2",
              marginTop: "15px",
              "& .step-number": {
                color: "#ffffff",
                height: "25px",
                width: "25px",
                background: "#081C42",
                marginRight: "10px",
                textAlign: "center",
                fontWeight: 600,
                borderRadius: "50%",
              },

              "& .step-row": {
                fontSize: "16px",
                display: "flex",
                marginTop: "15px",
                marginBottom: "15px",
              },
            }}
          >
            <Box>
              <Box className="step-row">
                <div className="step-text">
                  Click on the link to register this cluster in SUBNET
                </div>
              </Box>

              <Box
                sx={{
                  flex: "1",
                  display: "flex",
                  alignItems: "center",
                  gap: 3,
                }}
              >
                <Link
                  className={classes.link}
                  color="inherit"
                  href={offlineRegUrl}
                  target="_blank"
                >
                  https://subnet.min.io/cluster/register
                </Link>

                <TooltipWrapper tooltip={"Copy to Clipboard"}>
                  <CopyToClipboard text={offlineRegUrl}>
                    <Button
                      type={"button"}
                      id={"copy-ult-to-clip-board"}
                      icon={<CopyIcon />}
                      color={"primary"}
                      variant={"regular"}
                    />
                  </CopyToClipboard>
                </TooltipWrapper>
              </Box>

              <div
                style={{
                  marginTop: "25px",
                  fontSize: "14px",
                  fontStyle: "italic",
                  color: "#5E5E5E",
                }}
              >
                If this machine does not have internet connection, Copy paste
                the following URL in a browser where you access SUBNET and
                follow the instructions to complete the registration
              </div>
            </Box>
          </Box>
          <RegisterHelpBox />
        </Box>
      </Box>
    </Fragment>
  );
=======
  const offlineRegistration = <OfflineRegistration />;
>>>>>>> 257e2bf98 (Move Register Component to Redux)

  const regUi = (
    <Fragment>
      <Box
        sx={{
          border: "1px solid #eaeaea",
          borderRadius: "2px",
          display: "flex",
          flexFlow: "column",
          padding: "43px",
        }}
      >
        {clusterRegistered && licenseInfo ? (
          <ClusterRegistered email={licenseInfo.email} />
        ) : (
          clusterRegistrationForm
        )}
      </Box>

      {!clusterRegistered && <ProxyConfiguration />}
    </Fragment>
  );

  const loadingUi = <div>Loading..</div>;
  const uiToShow = loadingLicenseInfo ? loadingUi : regUi;

  return (
    <Fragment>
      <PageHeader
        label="Register to MinIO Subscription Network"
        actions={<React.Fragment />}
      />

      <PageLayout>
        <Tabs
          value={curTab}
          onChange={(e: React.ChangeEvent<{}>, newValue: number) => {
            dispatch(setCurTab(newValue));
          }}
          indicatorColor="primary"
          textColor="primary"
          aria-label="cluster-tabs"
          variant="scrollable"
          scrollButtons="auto"
        >
          <Tab
            label="Credentials"
            id="simple-tab-0"
            aria-controls="simple-tab-panel-0"
          />
          <Tab
            label="API Key"
            id="simple-tab-1"
            aria-controls="simple-tab-panel-1"
          />
          <Tab
            label="Air-Gap"
            id="simple-tab-2"
            aria-controls="simple-tab-panel-2"
            onClick={() => fetchSubnetRegToken()}
          />
        </Tabs>

        <TabPanel index={0} value={curTab}>
          {uiToShow}
        </TabPanel>
        <TabPanel index={1} value={curTab}>
          {apiKeyRegistration}
        </TabPanel>
        <TabPanel index={2} value={curTab}>
          {offlineRegistration}
        </TabPanel>
      </PageLayout>
    </Fragment>
  );
};

export default withStyles(styles)(Register);
